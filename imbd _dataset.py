# -*- coding: utf-8 -*-
"""imbd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kdv8LWMW7rWfymXBbmXxt4SgN9HXMLhk
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D

from tensorflow.keras.preprocessing.sequence import pad_sequences

imdb = tf.keras.datasets.imdb

# En sık kullanılan kelime sayısı
vocab_size = 10000
# İncelemelerin maksimum uzunluğu
max_length = 200

(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=vocab_size)

# Padding işlemi
train_data = pad_sequences(train_data, maxlen=max_length, padding='post')
test_data = pad_sequences(test_data, maxlen=max_length, padding='post')

# Sözlüğü yükle
word_index = imdb.get_word_index()

def decode_review(encoded_review):
    reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])
    # NumPy dizisini liste haline getir
    decoded = ' '.join([reverse_word_index.get(i - 3, '?') for i in encoded_review])
    return decoded

import random

for _ in range(3):
    index = random.randint(0, len(train_data) - 1)
    # NumPy dizisini liste haline getirmek için .tolist() kullanıyoruz
    print(decode_review(train_data[index].tolist()), '\n')
    print('Label:', 'Pozitif' if train_labels[index] else 'Negatif', '\n\n')

model = Sequential()
model.add(Embedding(vocab_size, 16, input_length=max_length))
model.add(GlobalAveragePooling1D())
model.add(Dense(24, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

num_epochs = 30
history = model.fit(train_data,
                    train_labels,
                    epochs=num_epochs,
                    validation_data=(test_data, test_labels))

import matplotlib.pyplot as plt

def plot_graphs(history, string):
    plt.plot(history.history[string])
    plt.plot(history.history['val_'+string])
    plt.xlabel("Epochs")
    plt.ylabel(string)
    plt.legend([string, 'val_'+string])
    plt.show()

plot_graphs(history, 'accuracy')
plot_graphs(history, 'loss')

from sklearn.metrics import confusion_matrix, classification_report

# Modelin test verileri üzerinde tahmin yapmasını sağlayalım
predictions = model.predict(test_data)
# Tahminleri ikili sınıf değerlerine dönüştürelim: 0.5 üstü 1, altı 0
predictions = [1 if p > 0.5 else 0 for p in predictions]

# Karışıklık matrisini hesaplayalım
conf_matrix = confusion_matrix(test_labels, predictions)
print("Karışıklık Matrisi:")
print(conf_matrix)

# Sınıflandırma raporunu alalım
class_report = classification_report(test_labels, predictions, target_names=['Negatif', 'Pozitif'])
print("\nSınıflandırma Raporu:")
print(class_report)









